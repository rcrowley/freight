#!/bin/sh

# Rebuild the Freight cache from the Freight library.  The cache contains
# actual repositories that are suitable targets for `apt-get` (and maybe
# more in the future).

set -e

# Combined usage message and help screen.
usage() {
	echo "Usage: $(basename $0) [-k] [-g <email>] [-c <conf>] [-v] [-h] [<manager>/<distro>][...]" >&2
	[ -n "$1" ] && {
		echo "  -k, --keep                keep unreferenced versions of packages" >&2
		echo "  -g <email>, --gpg=<email> GPG key to use" >&2
		echo "  -c <conf>, --conf=<conf>  config file to parse" >&2
		echo "  -v, --verbose             verbose mode" >&2
		echo "  -h, --help                show this help message" >&2
	} && exit 0 || exit 1
}

# `getopts` doesn't support long options so this will have to do.
while [ "$#" -gt 0 ]
do
	case "$1" in
		-k|--keep)
			KEEP=1
			shift;;
		-g|--gpg)
			GPG="$2"
			shift 2;;
		-g*)
			GPG="$(echo $1 | cut -c3-)"
			shift;;
		--gpg=*)
			GPG="$(echo $1 | cut -c7-)"
			shift;;
		-c|--conf)
			CONF="$2"
			shift 2;;
		-c*)
			CONF="$(echo $1 | cut -c3-)"
			shift;;
		--conf=*)
			CONF="$(echo $1 | cut -c8-)"
			shift;;
		-v|--verbose)
			VERBOSE=1
			shift;;
		-h|--help) usage help;;
		-*) echo "# [freight] unknown switch: $1" >&2;;
		*) break;;
	esac
done
. freight-setup

# Create a working directory on the same device as the Freight cache.
mkdir -p "$VARCACHE"
TMP="$(mktemp -d "$VARCACHE/work.$$.XXXXXXXXXX")"
trap "rm -rf \"$TMP\"" 0

# Enter the Freight library directory so that items in `$@` may be given as
# absolute paths or as partial paths of the form `<manager>/<distro>` that
# are ultimately taken relative to the Freight library.
mkdir -p "$VARLIB"
cd "$VARLIB"

# Rebuild each distro serially.
if [ -z "$*" ]
then
	DIRS="$(
		find "$VARLIB" -mindepth 2 -maxdepth 2 \
			-type d ! -name ".*" \
			-printf "%P "
	)"
else
	DIRS="$@"
fi
for DIR in $DIRS
do

	# Parse the manager and distro out of the Freight library path.
	DIR="$(readlink -f "$DIR")"
	DIR="${DIR##$VARLIB/}"
	MANAGER="$(dirname $DIR)"
	DIST="$(basename $DIR)"

	# From here the process is customized on a per-manager basis.  The
	# sorted list of package filenames comes on `stdin` and the name of
	# the distro is the only argument.  From there, each manager can do
	# whatever it wants.
	. "$MANAGER.sh"
	SORT="$(sort -V </dev/null 2>/dev/null && echo "sort -V" || echo "sort")"
	find "$DIR" -type f -printf %P\\n 2>/dev/null |
	eval "$SORT" |
	eval "${MANAGER}_cache" "$DIST"

	# Clean up old packages as dictated by the manager.
	[ -z "$KEEP" ] && eval "${MANAGER}_clean"

done

# Clean up the working directory after $MANAGER is finished
rm -rf "$TMP"
